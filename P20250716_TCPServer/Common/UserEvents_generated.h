// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USEREVENTS_USEREVENTS_H_
#define FLATBUFFERS_GENERATED_USEREVENTS_USEREVENTS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace UserEvents {

struct C2S_Signup;
struct C2S_SignupBuilder;

struct S2C_Signup;
struct S2C_SignupBuilder;

struct C2S_Login;
struct C2S_LoginBuilder;

struct S2C_Login;
struct S2C_LoginBuilder;

struct C2S_Logout;
struct C2S_LogoutBuilder;

struct S2C_Logout;
struct S2C_LogoutBuilder;

struct EventData;
struct EventDataBuilder;

enum EventType : uint8_t {
  EventType_NONE = 0,
  EventType_C2S_Signup = 1,
  EventType_S2C_Signup = 2,
  EventType_C2S_Login = 3,
  EventType_S2C_Login = 4,
  EventType_C2S_Logout = 5,
  EventType_S2C_Logout = 6,
  EventType_MIN = EventType_NONE,
  EventType_MAX = EventType_S2C_Logout
};

inline const EventType (&EnumValuesEventType())[7] {
  static const EventType values[] = {
    EventType_NONE,
    EventType_C2S_Signup,
    EventType_S2C_Signup,
    EventType_C2S_Login,
    EventType_S2C_Login,
    EventType_C2S_Logout,
    EventType_S2C_Logout
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[8] = {
    "NONE",
    "C2S_Signup",
    "S2C_Signup",
    "C2S_Login",
    "S2C_Login",
    "C2S_Logout",
    "S2C_Logout",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType_NONE, EventType_S2C_Logout)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventType()[index];
}

template<typename T> struct EventTypeTraits {
  static const EventType enum_value = EventType_NONE;
};

template<> struct EventTypeTraits<UserEvents::C2S_Signup> {
  static const EventType enum_value = EventType_C2S_Signup;
};

template<> struct EventTypeTraits<UserEvents::S2C_Signup> {
  static const EventType enum_value = EventType_S2C_Signup;
};

template<> struct EventTypeTraits<UserEvents::C2S_Login> {
  static const EventType enum_value = EventType_C2S_Login;
};

template<> struct EventTypeTraits<UserEvents::S2C_Login> {
  static const EventType enum_value = EventType_S2C_Login;
};

template<> struct EventTypeTraits<UserEvents::C2S_Logout> {
  static const EventType enum_value = EventType_C2S_Logout;
};

template<> struct EventTypeTraits<UserEvents::S2C_Logout> {
  static const EventType enum_value = EventType_S2C_Logout;
};

bool VerifyEventType(::flatbuffers::Verifier &verifier, const void *obj, EventType type);
bool VerifyEventTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct C2S_Signup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_SignupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_PASSWORD = 6,
    VT_USER_NAME = 8
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  const ::flatbuffers::String *user_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyOffset(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           verifier.EndTable();
  }
};

struct C2S_SignupBuilder {
  typedef C2S_Signup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(C2S_Signup::VT_USER_ID, user_id);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C2S_Signup::VT_PASSWORD, password);
  }
  void add_user_name(::flatbuffers::Offset<::flatbuffers::String> user_name) {
    fbb_.AddOffset(C2S_Signup::VT_USER_NAME, user_name);
  }
  explicit C2S_SignupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Signup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Signup>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Signup> CreateC2S_Signup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_name = 0) {
  C2S_SignupBuilder builder_(_fbb);
  builder_.add_user_name(user_name);
  builder_.add_password(password);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_Signup> CreateC2S_SignupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *password = nullptr,
    const char *user_name = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  return UserEvents::CreateC2S_Signup(
      _fbb,
      user_id__,
      password__,
      user_name__);
}

struct S2C_Signup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_SignupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4,
    VT_MESSAGE = 6
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_SignupBuilder {
  typedef S2C_Signup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(S2C_Signup::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_Signup::VT_MESSAGE, message);
  }
  explicit S2C_SignupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Signup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Signup>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Signup> CreateS2C_Signup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_SignupBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_Signup> CreateS2C_SignupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return UserEvents::CreateS2C_Signup(
      _fbb,
      success,
      message__);
}

struct C2S_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_NAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *user_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_NAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C2S_LoginBuilder {
  typedef C2S_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_name(::flatbuffers::Offset<::flatbuffers::String> user_name) {
    fbb_.AddOffset(C2S_Login::VT_USER_NAME, user_name);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C2S_Login::VT_PASSWORD, password);
  }
  explicit C2S_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Login> CreateC2S_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C2S_LoginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_user_name(user_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_Login> CreateC2S_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_name = nullptr,
    const char *password = nullptr) {
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return UserEvents::CreateC2S_Login(
      _fbb,
      user_name__,
      password__);
}

struct S2C_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_USER_NAME = 6,
    VT_SUCCESS = 8
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  const ::flatbuffers::String *user_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_NAME);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyOffset(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct S2C_LoginBuilder {
  typedef S2C_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(S2C_Login::VT_PLAYER_ID, player_id, 0);
  }
  void add_user_name(::flatbuffers::Offset<::flatbuffers::String> user_name) {
    fbb_.AddOffset(S2C_Login::VT_USER_NAME, user_name);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(S2C_Login::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit S2C_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Login> CreateS2C_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_name = 0,
    bool success = false) {
  S2C_LoginBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_user_name(user_name);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_Login> CreateS2C_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    const char *user_name = nullptr,
    bool success = false) {
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  return UserEvents::CreateS2C_Login(
      _fbb,
      player_id,
      user_name__,
      success);
}

struct C2S_Logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_LogoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           verifier.EndTable();
  }
};

struct C2S_LogoutBuilder {
  typedef C2S_Logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(C2S_Logout::VT_PLAYER_ID, player_id, 0);
  }
  explicit C2S_LogoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Logout> CreateC2S_Logout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0) {
  C2S_LogoutBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct S2C_Logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_LogoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_SUCCESS = 6
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct S2C_LogoutBuilder {
  typedef S2C_Logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(S2C_Logout::VT_PLAYER_ID, player_id, 0);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(S2C_Logout::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit S2C_LogoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Logout> CreateS2C_Logout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    bool success = false) {
  S2C_LogoutBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_success(success);
  return builder_.Finish();
}

struct EventData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EventDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  UserEvents::EventType data_type() const {
    return static_cast<UserEvents::EventType>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const UserEvents::C2S_Signup *data_as_C2S_Signup() const {
    return data_type() == UserEvents::EventType_C2S_Signup ? static_cast<const UserEvents::C2S_Signup *>(data()) : nullptr;
  }
  const UserEvents::S2C_Signup *data_as_S2C_Signup() const {
    return data_type() == UserEvents::EventType_S2C_Signup ? static_cast<const UserEvents::S2C_Signup *>(data()) : nullptr;
  }
  const UserEvents::C2S_Login *data_as_C2S_Login() const {
    return data_type() == UserEvents::EventType_C2S_Login ? static_cast<const UserEvents::C2S_Login *>(data()) : nullptr;
  }
  const UserEvents::S2C_Login *data_as_S2C_Login() const {
    return data_type() == UserEvents::EventType_S2C_Login ? static_cast<const UserEvents::S2C_Login *>(data()) : nullptr;
  }
  const UserEvents::C2S_Logout *data_as_C2S_Logout() const {
    return data_type() == UserEvents::EventType_C2S_Logout ? static_cast<const UserEvents::C2S_Logout *>(data()) : nullptr;
  }
  const UserEvents::S2C_Logout *data_as_S2C_Logout() const {
    return data_type() == UserEvents::EventType_S2C_Logout ? static_cast<const UserEvents::S2C_Logout *>(data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyEventType(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const UserEvents::C2S_Signup *EventData::data_as<UserEvents::C2S_Signup>() const {
  return data_as_C2S_Signup();
}

template<> inline const UserEvents::S2C_Signup *EventData::data_as<UserEvents::S2C_Signup>() const {
  return data_as_S2C_Signup();
}

template<> inline const UserEvents::C2S_Login *EventData::data_as<UserEvents::C2S_Login>() const {
  return data_as_C2S_Login();
}

template<> inline const UserEvents::S2C_Login *EventData::data_as<UserEvents::S2C_Login>() const {
  return data_as_S2C_Login();
}

template<> inline const UserEvents::C2S_Logout *EventData::data_as<UserEvents::C2S_Logout>() const {
  return data_as_C2S_Logout();
}

template<> inline const UserEvents::S2C_Logout *EventData::data_as<UserEvents::S2C_Logout>() const {
  return data_as_S2C_Logout();
}

struct EventDataBuilder {
  typedef EventData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(EventData::VT_TIMESTAMP, timestamp, 0);
  }
  void add_data_type(UserEvents::EventType data_type) {
    fbb_.AddElement<uint8_t>(EventData::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(EventData::VT_DATA, data);
  }
  explicit EventDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EventData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EventData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EventData> CreateEventData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    UserEvents::EventType data_type = UserEvents::EventType_NONE,
    ::flatbuffers::Offset<void> data = 0) {
  EventDataBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline bool VerifyEventType(::flatbuffers::Verifier &verifier, const void *obj, EventType type) {
  switch (type) {
    case EventType_NONE: {
      return true;
    }
    case EventType_C2S_Signup: {
      auto ptr = reinterpret_cast<const UserEvents::C2S_Signup *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_Signup: {
      auto ptr = reinterpret_cast<const UserEvents::S2C_Signup *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_Login: {
      auto ptr = reinterpret_cast<const UserEvents::C2S_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_Login: {
      auto ptr = reinterpret_cast<const UserEvents::S2C_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_Logout: {
      auto ptr = reinterpret_cast<const UserEvents::C2S_Logout *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_Logout: {
      auto ptr = reinterpret_cast<const UserEvents::S2C_Logout *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEventTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEventType(
        verifier,  values->Get(i), types->GetEnum<EventType>(i))) {
      return false;
    }
  }
  return true;
}

inline const UserEvents::EventData *GetEventData(const void *buf) {
  return ::flatbuffers::GetRoot<UserEvents::EventData>(buf);
}

inline const UserEvents::EventData *GetSizePrefixedEventData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<UserEvents::EventData>(buf);
}

inline bool VerifyEventDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<UserEvents::EventData>(nullptr);
}

inline bool VerifySizePrefixedEventDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<UserEvents::EventData>(nullptr);
}

inline void FinishEventDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<UserEvents::EventData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEventDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<UserEvents::EventData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace UserEvents

#endif  // FLATBUFFERS_GENERATED_USEREVENTS_USEREVENTS_H_
